define("local_notificationsagent/notification_statusrule",["exports","core/str","core/notification","local_notificationsagent/rule/repository"],(function(_exports,_str,_notification,_repository){var obj;
/**
   * @module    local_notificationsagent/statusrule
   * @copyright 2023 ISYC <soporte@isyc.com>
   * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
   */Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.init=void 0,_notification=(obj=_notification)&&obj.__esModule?obj:{default:obj};const RULE_STATUS_RESUMED=0,RULE_STATUS_PAUSED=1,RULE_STATUS_STRING=[{key:"status_paused",component:"local_notificationsagent"},{key:"status_active",component:"local_notificationsagent"},{key:"statusacceptpaused",component:"local_notificationsagent"},{key:"statusacceptactivated",component:"local_notificationsagent"}];_exports.init=()=>{$("#statusRuleModal").on("show.bs.modal",(function(e){ruleButton=$(e.relatedTarget);let id=ruleButton.data("idrule"),statusText=ruleButton.data("textstatus");const modal=$(this),requiredStrings=[{key:"statustitle",component:"local_notificationsagent",param:{textstatus:statusText,title:$("#card-"+id+" .name").text()}},{key:"statuscontent",component:"local_notificationsagent",param:{textstatus:statusText.toLowerCase(),title:$("#card-"+id+" .name").text()}}];(0,_str.get_strings)(requiredStrings).then((_ref=>{let[ruleTitle,ruleContent]=_ref;modal.find(".modal-title").text(ruleTitle),modal.find(".modal-body > div").text(ruleContent)}))})),$("#statusRuleModal #acceptStatusRule").on("click",(e=>{e.preventDefault(),setRuleStatus(ruleButton)}))};const setRuleStatus=async ruleButton=>{let ruleid=ruleButton.data("idrule"),status=ruleButton.data("valuestatus");status=status?RULE_STATUS_PAUSED:RULE_STATUS_RESUMED,$("#statusRuleModal").modal("hide"),(0,_str.get_strings)(RULE_STATUS_STRING).then((_ref2=>{let[ruleBadgePaused,ruleBadgeActive,rulePaused,ruleResumed]=_ref2,badgestatus=$("#card-"+ruleid+" .badge-status");status?(badgestatus.removeClass("badge-active"),badgestatus.addClass("badge-paused"),badgestatus.find("span").text(ruleBadgePaused)):(badgestatus.removeClass("badge-paused"),badgestatus.addClass("badge-active"),badgestatus.find("span").text(ruleBadgeActive)),ruleButton.addClass("d-none"),status?($('a[data-idrule="'+ruleid+'"][data-target="#statusRuleModal"][data-valuestatus="0"]').removeClass("d-none"),_notification.default.addNotification({message:rulePaused,type:"info"})):($('a[data-idrule="'+ruleid+'"][data-target="#statusRuleModal"][data-valuestatus="1"]').removeClass("d-none"),_notification.default.addNotification({message:ruleResumed,type:"info"}))}));try{response=await(0,_repository.updateRuleStatus)(ruleid,status)}catch(exception){_notification.default.exception(exception)}}}));

//# sourceMappingURL=notification_statusrule.min.js.map